"""
1) I must implement the search mechanisms using the method search from Text widget. Using
python regex lib is a bit expensive. If i implemented the search mec with search method
i wouldn't need to add a lot of tags to mark the regions matched. I could as well implement the functions:

replace_all_up
replace_all_down
replace_all
replace_on

Based on the functions.

replace_next
replace_back

I wouldn't need the function:

highligh_all

The matches would be highlighed based on the functions.

go_next_search
go_back_search

So i would spare the payload of tagging everything in the text.

Although it wouldnt highligh the occurences while one scrolls up or down. I'm not sure about it yet. 
but it might be interesting to implement the actual search based on the search method even if i don't change this
behavior once i have to copy the entire content into a new variable to pass to regex lib.

A way to make the matches in the visible are highlighed while one scrolls up or down would call a function
to highligh it though the algorithm seems a bit messy.
"""

3) It should be interesting implementing a plugin
that detects the kind of comment used in a programming file.
So, the user presses a key then it comments the line.

"""
4) Fix the select_word function. That permits selecting words
under the cursor.
"""

5) Implement a set of keys that permits moving around
the window areas. it could use numbers as the key shortcuts.

6) Implement a plugin to highligh c++ code.

7) Implement a mode suitable for shell.

"""
8) Review the tab completion.
"""

9) I should make it possible to send TAB to the bash plugin. So, i could have guesses for commands.


10) Implement a variable which holds a parameter named 
cursor_speed, this parameter determines how fast the
cursor should move around when calling the methods up, down, left, right
etc.

 Using this feature, it is possible to bind an event to a method
which increases this value so we could speed up when moving the
cursor around. An ideal key would be w, after some period of time
without using the up, left, right, down arrows
the parameter should be reseted.

11) It would be cool if there was a folder with all kind of general
scripts. The scripts would be descripted roughly and have
a setup.py for installation and use with escs.


12) It might be interesting to implement a plugin
which saves the files into a folder specified by the user
without requiring to save it specifically. 
The files would be named none-1, none-2, ...


13) Implement a key that goes back to the last occurence of ()[]{}

14) Stabilish a convension for tuple names returned by tag_ranges
for names of tags, iterators(seq)

15) Comment all the code inside AreaVi.

16) Implement a key that shades a given line and adds a tag to the line.
Implement two keys up and down that permits going to the next and prev occurence
of the given tag.

17) Implement a key that selects the text between (), [], {}


18) I need to make area.filename hold the complete path of the file.
when one does cd /path/dir
then vy file.py it opens the file based o getcwd then sets area.filename = 'file.py'.
It turns out that the plugin magic just breaks when it happens
because it calls viper with the wrong path of the python file then it prints out
the path of the evolved files in a complete way and get_opened_files cant index
the files correctly in order for set_line to work well from jack.py.

19) I should rewrite replace_all on top of replace_up and replace_down.

20) It would be interesting to make replace_up, replace_down, replace_on, replace_all accept parameters like nocase, nolinestop, elide, etc.

21) delete_ranges could be written on top of replace_ranges.

22) replace_ranges should be named tag_replace_ranges.
It follows the coding style guide.
It should receive index0, index1.


23) delete_ranges should be written as tag_delete_ranges.

24) get_ranges should receive index0 and index1
It should be written tag_get_ranges.

25) get_ranges_with_sep should be namaed tag_get_ranges_with_sep
and tag_get_ranges should be written on top of tag_get_ranges_with_sep
it receives '' as sep.


26) I must make hook print a decent msg when one attempts to bind a non valid seq.
It prints an odd exception.

27) I must test whether AreaVi.edit_separator must be called before the insertions/deletions 
methods are performed.

28) I must understand why calling edit_separator before replace_up,
replace_down, tag_replace_ranges isn't working. My guess is
both call insert and delete.

29) Implement a key that gets all the tags attached to the range under the
cursor and two other keys that permits going to the next and previous
range of text that contains all of the saved tags.
This pattern appeared when implementing the command find in utils.

30) I should implement a command like find_with_cond in the util.py. So
one could use it with sub.


21) When a tab is deleted it seems to still existed because
i have appended Stdout to a tab then ended with it
after i have sent commands to the bash then bash outputed back stuff
it should throw an exception as it does after i delete a vertical/horizontal
area. I must make Transmitter.remove not throw exception as well or just
handle it inside box.py.

22) Make vyapp do not take off selection when esc is pressed, find
another key to take off selection.
23) Make vyapp selection work with o, p, 1, 2, ] and } and P and O.

24) Make it possible to do things like.
area.hook(mode, callback, args, opt=False)
where True means 'dont let tkinter grab the event' when
it is passed area.chmode(1, opt=True)

25) Implement a key command that selects sequence of characters
in [A-Za-Z0-9_ ] This is gonna be useful with pdb and jdb.

26) Implement command tools in utils.py or other file
that permits executing python code like.
open_in_a_new_tab('filename')
open_in_a_new_vertical_area('filename')
open_in_a_new_horizontal_area('filename')
So it is possible to implement e-escs that quickly opens files.

27) Implement the keys Control-F4 that opens a new vertical area and loads
a file inside it. Implement Control-F5 that does the same but with a horizontal area.
So i don't need to press Control-F4 then Control-d.

28) Implement a key that permits selection regions of non space characters like.

    alpha beta gama zeta    

Would add selection to alpha beta gama zeta. This is useful for plugins like pdb.

29) Implement the document for key commands inside the modules so people can quickly look for them with help python command from inside vy.

import vyapp.plugins
help(vyapp.plugins)

30) Change the comment code keys to a separate file.


31) Make AreaVi set as abspath the opened file.


32) Implement a command in utils that 'forgets about a given key command from a given mode.'
Like 
forget_key(mode, 'Control-esc') would remove all callbacks from that event.

33) Implement a function like tag_match that receives two indexs.
index and stopindex, it should return all tags in that range.





